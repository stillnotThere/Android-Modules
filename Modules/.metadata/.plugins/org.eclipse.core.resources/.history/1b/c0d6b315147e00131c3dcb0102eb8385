/**
 * @author Rohan K.M rohan.mahendroo@gmail.com
 * CallMonitoring_2
 * com.app.project.acropolis.monitor
 * CallMonitoring_2.java
 * Created - 2013-11-12 4:44:33 PM	
 * Modified - 2013-11-12 4:44:33 PM
 * NOTES - 
 */
package com.app.project.acropolis.monitor;

import android.content.Context;
import android.database.ContentObserver;
import android.database.Cursor;
import android.os.Handler;
import android.provider.CallLog.Calls;

import com.app.project.acropolis.GlobalConstants;
import com.app.project.acropolis.Logger;
import com.app.project.acropolis.ProjectAcropolisActivity;
import com.app.project.acropolis.database.PersistedData;

/**
 * @author CPH-iMac
 *
 */
public class CallMonitoring_2 extends ContentObserver 
{
	private Handler logHandler = new Handler();
	private int counter = 0;

	private final String[] projection = {Calls.TYPE,Calls.DURATION,Calls.DATE};
	private final String selection = null;
	private final String[] selectionArgs = null;
	private final String sortOrder = null;
	private Context _context = null;

	public CallMonitoring_2(Context __context) 
	{
		super(null);
		_context = __context;
	}

	public void onChange(boolean selfChange)
	{
		Logger.Debug(this.getClass().getSimpleName());
		Cursor cursor = ProjectAcropolisActivity.getContext().
				getContentResolver().
				query(
						Calls.CONTENT_URI,
						projection,
						selection,
						selectionArgs, 
						sortOrder);
		cursor.moveToFirst();
		Logger.Debug(cursor.getClass().toString());
//		if(cursor!=null)
//		{
			logHandler.postDelayed(checkLog, 10*1000);
//		}
		cursor.close();
	}

	public boolean deliverSelfNotifications()
	{
		return true;
	}
	
	private long oldCall = 0;

	private boolean checkRepeatedCalls(long time)
	{
		boolean repeatCall = false;

		oldCall = time;
		
		return repeatCall;
	}
	
	private Runnable checkLog = new Runnable() 
	{
		@Override
		public void run()
		{
			++counter;
			Logger.Debug("counter:::"+counter);
			if(counter<=1)
			{
				Logger.Debug("Getting Log activity...");
				String[] projection = new String[]{
						Calls.NUMBER,
						Calls.DURATION,
						Calls.TYPE,
						Calls.DATE};
				Cursor cur = ProjectAcropolisActivity.getContext().
						getContentResolver().
						query(
								Calls.CONTENT_URI,
								projection, 
								null, 
								null, 
								Calls.DATE +" desc");
				cur.moveToFirst();
				String lastCallnumber = cur.getString(0);
				int lastCallduration = Integer.parseInt(cur.getString(1));
				int lastCallType = Integer.parseInt(cur.getString(2));
				int lastCallTime = Integer.parseInt(cur.getString(3));
				
				Logger.Debug("last callNumber::"+lastCallnumber + 
						"\nduration::"+lastCallduration +
						"\ntype::"+lastCallType +
						"\ntime::"+lastCallTime);
				Logger.Debug("counter::\t\t"+counter);
				
				if(lastCallType == Calls.INCOMING_TYPE)
				{
					Logger.Debug("incoming");
					if(new GlobalConstants().checkRoaming(_context))
					{
						int db_temp = Integer.parseInt(new PersistedData().fetchData(GlobalConstants.PersistenceConstants.ROAM_INCOMING));
						db_temp = (int)convert(lastCallduration) + db_temp;
						new PersistedData().putData(GlobalConstants.PersistenceConstants.ROAM_INCOMING, String.valueOf(db_temp));
					}
					else
					{
						int db_temp = Integer.parseInt(new PersistedData().fetchData(GlobalConstants.PersistenceConstants.LOCAL_INCOMING));
						db_temp = (int)convert(lastCallduration) + db_temp;
						new PersistedData().putData(GlobalConstants.PersistenceConstants.LOCAL_INCOMING, String.valueOf(db_temp));
					}
				}
				if(lastCallType == Calls.OUTGOING_TYPE)
				{
					Logger.Debug("outgoing");
					if(new GlobalConstants().checkRoaming(_context))
					{
						int db_temp = Integer.parseInt(new PersistedData().fetchData(GlobalConstants.PersistenceConstants.ROAM_OUTGOING));
						db_temp = (int)convert(lastCallduration) + db_temp;
						new PersistedData().putData(GlobalConstants.PersistenceConstants.ROAM_OUTGOING, String.valueOf(db_temp));
					}
					else
					{
						int db_temp = Integer.parseInt(new PersistedData().fetchData(GlobalConstants.PersistenceConstants.LOCAL_OUTGOING));
						db_temp = (int)convert(lastCallduration) + db_temp;
						new PersistedData().putData(GlobalConstants.PersistenceConstants.LOCAL_OUTGOING, String.valueOf(db_temp));
					}
				}
			}
			else if(counter>2)
			{
				counter=0;
			}
		}
	};

	public long convert(long sec)
	{
		long min=0;
		long secs=sec;
		if(secs%60==0)
		{
			min = secs/60;
		}
		else
		{
			min = (long) Math.abs(secs/60) + 1;
		}
		return min;
	}

	
}
