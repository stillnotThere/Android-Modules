/**
 * @author Rohan K.M rohan.mahendroo@gmail.com
 * DB
 * com.acropolis.radio.module.model
 * DB.java
 * Created - 2013-08-22 3:07:43 PM	
 * Modified - 2013-08-22 3:07:43 PM
 * TODO
 * NOTES - 
 */
package com.acropolis.radio.module.model;

import android.content.ContentProvider;
import android.content.Context;
import android.database.sqlite.SQLiteDatabase;

import com.acropolis.radio.module.global.DBConstants;

/**
 * @author CPH-iMac
 *
 */
public class DBAdapter 
{

	protected Context context = null;
	/*SQLiteDatabaseOpenHelper and args*/
	protected DBOpenHelper dbOpenHelper = null;
	/*SQLiteDatabase and args*/
	protected static SQLiteDatabase db = null;
	private static SQLiteDatabase corruptdb = null;
	protected static DBTransactionListener dbTransactionListener = 
			new DBTransactionListener();
	protected static DBErrorHandler dbErrorHandler = new DBErrorHandler();
	
	public DBAdapter(Context _context)
	{
		this.context = _context;
		dbOpenHelper = new DBOpenHelper(this.context);
	}
	
	public static void OpenDB()
	{
		db.beginTransactionWithListener(new DBTransactionListener());
		db.enableWriteAheadLogging();	//need to look over
		SQLiteDatabase.openOrCreateDatabase(DBConstants.dbPath, 
				DBConstants.cursorFactory, 
				dbErrorHandler);
	}
	
	public static void CloseDB()
	{
		db.beginTransactionWithListener(dbTransactionListener);
		db.close();
	}
	
	
	public static boolean isEmpty()
	{
		boolean dbEmpty = false;
		
		
		
		return dbEmpty;
	}
	
	public static boolean insertValues()
	{
		boolean success = true;
		
		db.beginTransactionWithListener(dbTransactionListener);
		if(dbTransactionListener.isCorrupted())
		{
			///ISSSUEEEEE!!!!!!!!!!!!!!!!!!!!!
			corruptdb = db;
			dbErrorHandler.onCorruption(corruptdb);
		}
		else
		{
			ContentProvider contentProvider = new ContentProvider(1);
//			db.insert(DBConstants.tableName, null, );
		}
		return success;
	}
	
	public static boolean updateValues()
	{
		boolean success = true;
		
		db.beginTransactionWithListener(dbTransactionListener);
		
		
		
		return success;
	}
	
	/**
	 * Runs query "SELECT * FROM 
	 * @return selectAll
	 */
	public static String[] retrieveAllValues()
	{
		String[] selectAll = new String[200];
		
		db.beginTransactionWithListener(dbTransactionListener);
		
		return selectAll;
	}
	
	/**
	 * Fetch value from req row and column index
	 * @param id, columnindex
	 * @return selectOne
	 */
	public static String retrieveAValue(int id,int columnindex)
	{
		String selectOne = "";
		
		db.beginTransactionWithListener(dbTransactionListener);
		
		return selectOne;
	}
	
	public static boolean deleteValues()
	{
		boolean success = true;
		
		db.beginTransactionWithListener(dbTransactionListener);
		
		return success;
	}
}
